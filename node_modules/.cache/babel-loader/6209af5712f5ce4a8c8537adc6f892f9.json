{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.random = random;\nexports.lerp = lerp;\nexports.getSize = getSize;\n/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\n\nfunction random(min, max) {\n  var randomNumber = Math.random() * (max - min + 1) + min;\n\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\n    return randomNumber;\n  } else {\n    return Math.floor(randomNumber);\n  }\n}\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\n\n\nfunction lerp(start, end, normal) {\n  return (1 - normal) * start + normal * end;\n}\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\n\n\nfunction getSize(element) {\n  if (!element) return {\n    height: 0,\n    width: 0\n  };\n  return {\n    height: element.offsetHeight,\n    width: element.offsetWidth\n  };\n}","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASA,MAAT,CAAgBC,GAAhB,EAA6BC,GAA7B,EAAkD;AACvD,MAAMC,YAAY,GAAGC,IAAI,CAACJ,MAALI,MAAiBF,GAAG,GAAGD,GAANC,GAAY,CAA7BE,IAAkCH,GAAvD;;AAEA,MAAI,CAACI,MAAM,CAACC,SAAPD,CAAiBJ,GAAjBI,CAAD,IAA0B,CAACA,MAAM,CAACC,SAAPD,CAAiBH,GAAjBG,CAA/B,EAAsD;AACpD,WAAOF,YAAP;AADF,SAEO;AACL,WAAOC,IAAI,CAACG,KAALH,CAAWD,YAAXC,CAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,IAAT,CAAcC,KAAd,EAA6BC,GAA7B,EAA0CC,MAA1C,EAA0D;AAC/D,SAAO,CAAC,IAAIA,MAAL,IAAeF,KAAf,GAAuBE,MAAM,GAAGD,GAAvC;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASE,OAAT,CAAiBC,OAAjB,EAA+C;AACpD,MAAI,CAACA,OAAL,EAAc,OAAO;AAAEC,UAAM,EAAE,CAAV;AAAaC,SAAK,EAAE;AAApB,GAAP;AAEd,SAAO;AACLD,UAAM,EAAED,OAAO,CAACG,YADX;AAELD,SAAK,EAAEF,OAAO,CAACI;AAFV,GAAP;AAID","names":["random","min","max","randomNumber","Math","Number","isInteger","floor","lerp","start","end","normal","getSize","element","height","width","offsetHeight","offsetWidth"],"sources":["/home/stark/Videos/cetpa/11/supercar/node_modules/react-snowfall/src/utils.ts"],"sourcesContent":["/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\r\nexport function random(min: number, max: number): number {\r\n  const randomNumber = Math.random() * (max - min + 1) + min\r\n\r\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\r\n    return randomNumber\r\n  } else {\r\n    return Math.floor(randomNumber)\r\n  }\r\n}\r\n\r\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\r\nexport function lerp(start: number, end: number, normal: number) {\r\n  return (1 - normal) * start + normal * end\r\n}\r\n\r\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\r\nexport function getSize(element?: HTMLElement | null) {\r\n  if (!element) return { height: 0, width: 0 }\r\n\r\n  return {\r\n    height: element.offsetHeight,\r\n    width: element.offsetWidth,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}