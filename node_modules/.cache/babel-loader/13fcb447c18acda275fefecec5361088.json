{"ast":null,"code":"import _Reflect$construct from \"core-js-pure/stable/reflect/construct.js\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _concatInstanceProperty from \"core-js-pure/stable/instance/concat.js\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Wrapper from './wrapper';\nimport { parseSize, setGroupedTimeout, calculateBorderRadius, getNullableText } from '../utils';\n\nvar AvatarText = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AvatarText, _React$PureComponent);\n\n  var _super = _createSuper(AvatarText);\n\n  function AvatarText() {\n    var _context;\n\n    var _this;\n\n    _classCallCheck(this, AvatarText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, _concatInstanceProperty(_context = [this]).call(_context, args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_scaleTextNode\", function (node) {\n      var retryTTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n      var _this$props = _this.props,\n          unstyled = _this$props.unstyled,\n          textSizeRatio = _this$props.textSizeRatio,\n          textMarginRatio = _this$props.textMarginRatio,\n          avatar = _this$props.avatar;\n      _this._node = node;\n      if (!node || !node.parentNode || unstyled || avatar.src || !_this._mounted) return;\n      var spanNode = node.parentNode;\n      var tableNode = spanNode.parentNode;\n\n      var _spanNode$getBounding = spanNode.getBoundingClientRect(),\n          containerWidth = _spanNode$getBounding.width,\n          containerHeight = _spanNode$getBounding.height; // Whenever the avatar element is not visible due to some CSS\n      // (such as display: none) on any parent component we will check\n      // whether the component has become visible.\n      //\n      // The time between checks grows up to half a second in an attempt\n      // to reduce flicker / performance issues.\n\n\n      if (containerWidth == 0 && containerHeight == 0) {\n        var ttl = Math.min(retryTTL * 1.5, 500);\n        setGroupedTimeout(function () {\n          return _this._scaleTextNode(node, ttl);\n        }, ttl);\n        return;\n      } // If the tableNode (outer-container) does not have its fontSize set yet,\n      // we'll set it according to \"textSizeRatio\"\n\n\n      if (!tableNode.style.fontSize) {\n        var baseFontSize = containerHeight / textSizeRatio;\n        tableNode.style.fontSize = \"\".concat(baseFontSize, \"px\");\n      } // Reset font-size such that scaling works correctly (#133)\n\n\n      spanNode.style.fontSize = null; // Measure the actual width of the text after setting the container size\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          textWidth = _node$getBoundingClie.width;\n\n      if (textWidth < 0) return; // Calculate the maximum width for the text based on \"textMarginRatio\"\n\n      var maxTextWidth = containerWidth * (1 - 2 * textMarginRatio); // If the text is too wide, scale it down by (maxWidth / actualWidth)\n\n      if (textWidth > maxTextWidth) spanNode.style.fontSize = \"calc(1em * \".concat(maxTextWidth / textWidth, \")\");\n    });\n\n    return _this;\n  }\n\n  _createClass(AvatarText, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._mounted = true;\n\n      this._scaleTextNode(this._node);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._mounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          round = _this$props2.round,\n          unstyled = _this$props2.unstyled,\n          title = _this$props2.title,\n          name = _this$props2.name,\n          value = _this$props2.value,\n          avatar = _this$props2.avatar;\n      var size = parseSize(this.props.size);\n      var initialsStyle = unstyled ? null : {\n        width: size.str,\n        height: size.str,\n        lineHeight: 'initial',\n        textAlign: 'center',\n        color: this.props.fgColor,\n        background: avatar.color,\n        borderRadius: calculateBorderRadius(round)\n      };\n      var tableStyle = unstyled ? null : {\n        display: 'table',\n        tableLayout: 'fixed',\n        width: '100%',\n        height: '100%'\n      };\n      var spanStyle = unstyled ? null : {\n        display: 'table-cell',\n        verticalAlign: 'middle',\n        fontSize: '100%',\n        whiteSpace: 'nowrap'\n      }; // Ensure the text node is updated and scaled when any of these\n      // values changed by calling the `_scaleTextNode` method using\n      // the correct `ref`.\n\n      var key = [avatar.value, this.props.size].join('');\n      return /*#__PURE__*/React.createElement(Wrapper, this.props, /*#__PURE__*/React.createElement(\"div\", {\n        className: className + ' sb-avatar__text',\n        style: initialsStyle,\n        title: getNullableText(title, name || value)\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: tableStyle\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: spanStyle\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        ref: this._scaleTextNode,\n        key: key\n      }, avatar.value)))));\n    }\n  }]);\n\n  return AvatarText;\n}(React.PureComponent);\n\n_defineProperty(AvatarText, \"propTypes\", {\n  name: PropTypes.string,\n  value: PropTypes.string,\n  avatar: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  className: PropTypes.string,\n  unstyled: PropTypes.bool,\n  fgColor: PropTypes.string,\n  textSizeRatio: PropTypes.number,\n  textMarginRatio: PropTypes.number,\n  round: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n});\n\n_defineProperty(AvatarText, \"defaultProps\", {\n  className: '',\n  fgColor: '#FFF',\n  round: false,\n  size: 100,\n  textSizeRatio: 3,\n  textMarginRatio: .15,\n  unstyled: false\n});\n\nexport { AvatarText as default };","map":{"version":3,"sources":["/home/stark/Videos/cetpa/11/supercar/node_modules/react-avatar/es/components/text.js"],"names":["_Reflect$construct","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_possibleConstructorReturn","_getPrototypeOf","_defineProperty","_concatInstanceProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","React","PropTypes","Wrapper","parseSize","setGroupedTimeout","calculateBorderRadius","getNullableText","AvatarText","_React$PureComponent","_super","_context","_this","_len","length","args","Array","_key","node","retryTTL","undefined","_this$props","props","unstyled","textSizeRatio","textMarginRatio","avatar","_node","parentNode","src","_mounted","spanNode","tableNode","_spanNode$getBounding","getBoundingClientRect","containerWidth","width","containerHeight","height","ttl","Math","min","_scaleTextNode","style","fontSize","baseFontSize","concat","_node$getBoundingClie","textWidth","maxTextWidth","key","value","componentDidMount","componentWillUnmount","render","_this$props2","className","round","title","name","size","initialsStyle","str","lineHeight","textAlign","color","fgColor","background","borderRadius","tableStyle","display","tableLayout","spanStyle","verticalAlign","whiteSpace","join","createElement","ref","PureComponent","string","object","oneOfType","bool","number","default"],"mappings":"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","sourcesContent":["import _Reflect$construct from \"core-js-pure/stable/reflect/construct.js\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _concatInstanceProperty from \"core-js-pure/stable/instance/concat.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Wrapper from './wrapper';\nimport { parseSize, setGroupedTimeout, calculateBorderRadius, getNullableText } from '../utils';\n\nvar AvatarText = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AvatarText, _React$PureComponent);\n\n  var _super = _createSuper(AvatarText);\n\n  function AvatarText() {\n    var _context;\n\n    var _this;\n\n    _classCallCheck(this, AvatarText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, _concatInstanceProperty(_context = [this]).call(_context, args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_scaleTextNode\", function (node) {\n      var retryTTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n      var _this$props = _this.props,\n          unstyled = _this$props.unstyled,\n          textSizeRatio = _this$props.textSizeRatio,\n          textMarginRatio = _this$props.textMarginRatio,\n          avatar = _this$props.avatar;\n      _this._node = node;\n      if (!node || !node.parentNode || unstyled || avatar.src || !_this._mounted) return;\n      var spanNode = node.parentNode;\n      var tableNode = spanNode.parentNode;\n\n      var _spanNode$getBounding = spanNode.getBoundingClientRect(),\n          containerWidth = _spanNode$getBounding.width,\n          containerHeight = _spanNode$getBounding.height; // Whenever the avatar element is not visible due to some CSS\n      // (such as display: none) on any parent component we will check\n      // whether the component has become visible.\n      //\n      // The time between checks grows up to half a second in an attempt\n      // to reduce flicker / performance issues.\n\n\n      if (containerWidth == 0 && containerHeight == 0) {\n        var ttl = Math.min(retryTTL * 1.5, 500);\n        setGroupedTimeout(function () {\n          return _this._scaleTextNode(node, ttl);\n        }, ttl);\n        return;\n      } // If the tableNode (outer-container) does not have its fontSize set yet,\n      // we'll set it according to \"textSizeRatio\"\n\n\n      if (!tableNode.style.fontSize) {\n        var baseFontSize = containerHeight / textSizeRatio;\n        tableNode.style.fontSize = \"\".concat(baseFontSize, \"px\");\n      } // Reset font-size such that scaling works correctly (#133)\n\n\n      spanNode.style.fontSize = null; // Measure the actual width of the text after setting the container size\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          textWidth = _node$getBoundingClie.width;\n\n      if (textWidth < 0) return; // Calculate the maximum width for the text based on \"textMarginRatio\"\n\n      var maxTextWidth = containerWidth * (1 - 2 * textMarginRatio); // If the text is too wide, scale it down by (maxWidth / actualWidth)\n\n      if (textWidth > maxTextWidth) spanNode.style.fontSize = \"calc(1em * \".concat(maxTextWidth / textWidth, \")\");\n    });\n\n    return _this;\n  }\n\n  _createClass(AvatarText, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._mounted = true;\n\n      this._scaleTextNode(this._node);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._mounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          round = _this$props2.round,\n          unstyled = _this$props2.unstyled,\n          title = _this$props2.title,\n          name = _this$props2.name,\n          value = _this$props2.value,\n          avatar = _this$props2.avatar;\n      var size = parseSize(this.props.size);\n      var initialsStyle = unstyled ? null : {\n        width: size.str,\n        height: size.str,\n        lineHeight: 'initial',\n        textAlign: 'center',\n        color: this.props.fgColor,\n        background: avatar.color,\n        borderRadius: calculateBorderRadius(round)\n      };\n      var tableStyle = unstyled ? null : {\n        display: 'table',\n        tableLayout: 'fixed',\n        width: '100%',\n        height: '100%'\n      };\n      var spanStyle = unstyled ? null : {\n        display: 'table-cell',\n        verticalAlign: 'middle',\n        fontSize: '100%',\n        whiteSpace: 'nowrap'\n      }; // Ensure the text node is updated and scaled when any of these\n      // values changed by calling the `_scaleTextNode` method using\n      // the correct `ref`.\n\n      var key = [avatar.value, this.props.size].join('');\n      return /*#__PURE__*/React.createElement(Wrapper, this.props, /*#__PURE__*/React.createElement(\"div\", {\n        className: className + ' sb-avatar__text',\n        style: initialsStyle,\n        title: getNullableText(title, name || value)\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: tableStyle\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: spanStyle\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        ref: this._scaleTextNode,\n        key: key\n      }, avatar.value)))));\n    }\n  }]);\n\n  return AvatarText;\n}(React.PureComponent);\n\n_defineProperty(AvatarText, \"propTypes\", {\n  name: PropTypes.string,\n  value: PropTypes.string,\n  avatar: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  className: PropTypes.string,\n  unstyled: PropTypes.bool,\n  fgColor: PropTypes.string,\n  textSizeRatio: PropTypes.number,\n  textMarginRatio: PropTypes.number,\n  round: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n});\n\n_defineProperty(AvatarText, \"defaultProps\", {\n  className: '',\n  fgColor: '#FFF',\n  round: false,\n  size: 100,\n  textSizeRatio: 3,\n  textMarginRatio: .15,\n  unstyled: false\n});\n\nexport { AvatarText as default };"]},"metadata":{},"sourceType":"module"}